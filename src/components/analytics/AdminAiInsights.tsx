import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useAiFeedback } from "@/hooks/useAiFeedback";
import { Loader2, Sparkles, RefreshCw, TrendingUp, AlertTriangle } from "lucide-react";

interface AnalyticsData {
  teachers: any[];
  totalStudents: number;
  totalClasses: number;
  overallAverage: number;
  totalSubmissions: number;
}

interface AdminAiInsightsProps {
  analyticsData: AnalyticsData;
}

const AdminAiInsights = ({ analyticsData }: AdminAiInsightsProps) => {
  const { generateSummary } = useAiFeedback();
  const [loading, setLoading] = useState(false);
  const [insights, setInsights] = useState<string | null>(null);

  const handleGenerateInsights = async () => {
    setLoading(true);
    try {
      // Transform school-wide data into format for AI analysis
      const summaryData = analyticsData.teachers.map((teacher) => ({
        assignment_title: `${teacher.name}'s Classes (${teacher.classCount} total)`,
        grade: teacher.averageGrade,
        feedback: `${teacher.totalSubmissions} total submissions with ${teacher.completionRate.toFixed(1)}% completion rate across ${teacher.classCount} classes.`,
      }));

      // Add overall school summary
      summaryData.unshift({
        assignment_title: "School-Wide Performance",
        grade: analyticsData.overallAverage,
        feedback: `Total: ${analyticsData.totalClasses} classes, ${analyticsData.teachers.length} teachers, ${analyticsData.totalStudents} students, ${analyticsData.totalSubmissions} submissions`,
      });

      const result = await generateSummary(summaryData);
      setInsights(result);
    } catch (error) {
      console.error("Error generating insights:", error);
    } finally {
      setLoading(false);
    }
  };

  // Calculate at-risk metrics
  const lowPerformingTeachers = analyticsData.teachers.filter(t => t.averageGrade < 70);
  const lowCompletionTeachers = analyticsData.teachers.filter(t => t.completionRate < 50);

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-primary" />
            AI-Powered School Insights
          </CardTitle>
          <CardDescription>
            Get comprehensive analysis and recommendations for school-wide performance
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Button
              onClick={handleGenerateInsights}
              disabled={loading || analyticsData.teachers.length === 0}
              className="gap-2"
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Analyzing School Data...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4" />
                  Generate School Insights
                </>
              )}
            </Button>

            {insights && (
              <Button
                variant="outline"
                onClick={handleGenerateInsights}
                disabled={loading}
                className="gap-2"
              >
                <RefreshCw className="h-4 w-4" />
                Refresh
              </Button>
            )}
          </div>

          {insights && (
            <Alert className="bg-primary/5 border-primary/20">
              <Sparkles className="h-4 w-4 text-primary" />
              <AlertDescription className="mt-2 whitespace-pre-wrap">
                {insights}
              </AlertDescription>
              <p className="text-xs text-muted-foreground mt-4">
                Generated by TailorEDU AI Assistant
              </p>
            </Alert>
          )}

          {!insights && !loading && (
            <Alert>
              <AlertDescription>
                Click "Generate School Insights" to receive AI-powered analysis of your entire
                school's performance, including trends, strengths, challenges, and actionable
                recommendations for improvement.
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Alert Cards for At-Risk Areas */}
      <div className="grid gap-4 md:grid-cols-2">
        {lowPerformingTeachers.length > 0 && (
          <Card className="border-yellow-200 bg-yellow-50/50">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-yellow-600" />
                Performance Attention Needed
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground mb-3">
                {lowPerformingTeachers.length} teacher(s) with average grades below 70%
              </p>
              <div className="space-y-2">
                {lowPerformingTeachers.map((teacher) => (
                  <div
                    key={teacher.teacher_id}
                    className="flex items-center justify-between p-2 rounded-md bg-background"
                  >
                    <span className="text-sm font-medium">{teacher.name}</span>
                    <span className="text-sm text-yellow-700 font-semibold">
                      {teacher.averageGrade.toFixed(1)}%
                    </span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {lowCompletionTeachers.length > 0 && (
          <Card className="border-orange-200 bg-orange-50/50">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-orange-600" />
                Engagement Support Needed
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground mb-3">
                {lowCompletionTeachers.length} teacher(s) with completion rates below 50%
              </p>
              <div className="space-y-2">
                {lowCompletionTeachers.map((teacher) => (
                  <div
                    key={teacher.teacher_id}
                    className="flex items-center justify-between p-2 rounded-md bg-background"
                  >
                    <span className="text-sm font-medium">{teacher.name}</span>
                    <span className="text-sm text-orange-700 font-semibold">
                      {teacher.completionRate.toFixed(0)}%
                    </span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Recommendations Card */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Actions & Recommendations</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2 text-sm">
            <li className="flex items-start gap-2">
              <span className="text-primary">•</span>
              <span>Review assignment design with teachers showing low engagement</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-primary">•</span>
              <span>Provide additional professional development for struggling areas</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-primary">•</span>
              <span>Celebrate and share best practices from top-performing teachers</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-primary">•</span>
              <span>Schedule check-ins with teachers needing support</span>
            </li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
};

export default AdminAiInsights;
