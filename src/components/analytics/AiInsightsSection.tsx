import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useAiFeedback } from "@/hooks/useAiFeedback";
import { Loader2, Sparkles, RefreshCw } from "lucide-react";

interface ClassStats {
  id: string;
  title: string;
  averageGrade: number;
  completionRate: number;
  totalStudents: number;
  totalSubmissions: number;
}

interface AiInsightsSectionProps {
  classStats: ClassStats[];
  preferredLanguage: string;
}

const AiInsightsSection = ({ classStats, preferredLanguage }: AiInsightsSectionProps) => {
  const { generateSummary } = useAiFeedback();
  const [loading, setLoading] = useState(false);
  const [insights, setInsights] = useState<string | null>(null);

  const handleGenerateInsights = async () => {
    setLoading(true);
    try {
      // Transform class stats into a format suitable for AI analysis
      const summaryData = classStats.map((classItem) => ({
        assignment_title: classItem.title,
        grade: classItem.averageGrade,
        feedback: `Class has ${classItem.totalStudents} students with ${classItem.totalSubmissions} submissions. Completion rate: ${classItem.completionRate.toFixed(1)}%`,
      }));

      const result = await generateSummary(summaryData);
      setInsights(result);
    } catch (error) {
      console.error("Error generating insights:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-primary" />
            AI-Powered Class Insights
          </CardTitle>
          <CardDescription>
            Get personalized recommendations and insights about your classes' performance
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Button
              onClick={handleGenerateInsights}
              disabled={loading || classStats.length === 0}
              className="gap-2"
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Analyzing...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4" />
                  Generate Insights
                </>
              )}
            </Button>

            {insights && (
              <Button
                variant="outline"
                onClick={handleGenerateInsights}
                disabled={loading}
                className="gap-2"
              >
                <RefreshCw className="h-4 w-4" />
                Refresh
              </Button>
            )}
          </div>

          {insights && (
            <Alert className="bg-primary/5 border-primary/20">
              <Sparkles className="h-4 w-4 text-primary" />
              <AlertDescription className="mt-2 whitespace-pre-wrap">
                {insights}
              </AlertDescription>
              <p className="text-xs text-muted-foreground mt-4">
                Generated by TailorEDU AI Assistant
              </p>
            </Alert>
          )}

          {!insights && !loading && (
            <Alert>
              <AlertDescription>
                Click "Generate Insights" to receive AI-powered analysis of your classes'
                performance, including strengths, challenges, and recommended areas for focus.
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Additional Stats Cards */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Top Performing Classes</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {[...classStats]
                .sort((a, b) => b.averageGrade - a.averageGrade)
                .slice(0, 3)
                .map((classItem, index) => (
                  <div
                    key={classItem.id}
                    className="flex items-center justify-between p-2 rounded-md bg-muted/50"
                  >
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-semibold text-muted-foreground">
                        #{index + 1}
                      </span>
                      <span className="text-sm">{classItem.title}</span>
                    </div>
                    <span className="text-sm font-semibold">
                      {classItem.averageGrade.toFixed(1)}%
                    </span>
                  </div>
                ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Needs Attention</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {[...classStats]
                .sort((a, b) => a.completionRate - b.completionRate)
                .slice(0, 3)
                .map((classItem) => (
                  <div
                    key={classItem.id}
                    className="flex items-center justify-between p-2 rounded-md bg-muted/50"
                  >
                    <span className="text-sm">{classItem.title}</span>
                    <span className="text-sm text-muted-foreground">
                      {classItem.completionRate.toFixed(0)}% completion
                    </span>
                  </div>
                ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AiInsightsSection;
